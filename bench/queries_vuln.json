[
  {
    "name": "Unsafe Evaluation Functions",
    "filter_prompt": "The code snippet contains a function call that dynamically executes code or system commands. Examples include Python's `eval()`, `exec()`, or functions like `os.system()`, `subprocess.run()` (especially with `shell=True`), `subprocess.call()` (with `shell=True`), or `popen()`. The critical feature is that the string representing the code or command to be executed is not a hardcoded literal; instead, it's derived from a variable, function argument, string concatenation/formatting, or an external source such as user input, network request, or LLM output.",
    "subdirs_or_files": [
      "/"
    ]
  },
  {
    "name": "Pickle/Cloudpickle Deserialization",
    "filter_prompt": "This code snippet deserializes data using functions from Python's `pickle` or `cloudpickle` libraries, such as `load()` or `loads()`. The input data for the deserialization operation is not a hardcoded literal.",
    "subdirs_or_files": [
      "/"
    ]
  },
  {
    "name": "Magic Bytes File Type Manipulation",
    "filter_prompt": "This code snippet implements logic to determine or validate a file's type by reading and analyzing its initial bytes (e.g., magic bytes, file signature, or header). This is often part of a file upload handling mechanism or file processing pipeline where verifying the actual content type based on its leading bytes is critical.",
    "subdirs_or_files": [
      "/"
    ]
  },
  {
    "name": "Shell Command Execution",
    "filter_prompt": "This code snippet executes a shell command, system command, an external program, or evaluates a string as code. This is often done using functions like `os.system`, `subprocess.call`, `subprocess.run` (especially with `shell=True`), `subprocess.Popen` (especially with `shell=True`), `commands.getoutput`, `Runtime.getRuntime().exec`, `ProcessBuilder`, `php.system`, `php.exec`, `php.shell_exec`, `php.passthru`, `php.popen`, PHP backticks (` `), `Node.child_process.exec`, `Node.child_process.execSync`, `eval`, `exec`, `ScriptEngine.eval()`, `execCommand`, `Perl.system`, `Ruby.system`, `Ruby.exec`, Ruby backticks (``), `Go.os/exec.Command`, etc. The command string, arguments to the command, or the string being evaluated as code, are derived from variables, function parameters, or other dynamic sources, rather than being solely hardcoded string literals.",
    "subdirs_or_files": [
      "/"
    ]
  },
  {
    "name": "Command Injection in CLI Applications",
    "filter_prompt": "This code snippet executes operating system commands using functions like `os.system`, `subprocess.run`, `subprocess.Popen`, `subprocess.call`, `subprocess.check_output`, `commands.getoutput`, or `pty.spawn`. The command being executed is dynamically constructed using string operations (e.g., concatenation, f-strings, `.format()`) with variables that could hold data from external sources like command-line arguments or file content. Prioritize instances where `subprocess` functions are used with `shell=True` or where command components are assembled from non-literal string variables.",
    "subdirs_or_files": [
      "/"
    ]
  },
  {
    "name": "Other Deserialization Mechanisms",
    "filter_prompt": "This code snippet performs deserialization of data using PyTorch's `torch.load()` (or similar model loading functions in AI/ML frameworks), Python's `shelve` module (e.g., `shelve.open()`, `shelf[key]`), or JDBC connection mechanisms (e.g., constructing connection URLs or using drivers). The deserialization is flagged if the input data (such as a model file path or content, data from a shelve file, or components of a JDBC URL) is not a hardcoded literal and could originate from an untrusted external source.",
    "subdirs_or_files": [
      "/"
    ]
  },
  {
    "name": "Path Traversal and File Operations",
    "filter_prompt": "Locate code snippets that perform file system operations (such as reading, writing, deleting, moving files or directories, extracting archives, or including files) or use file paths or names within system commands. Focus on cases where these file paths or names are derived from, or can be influenced by, external sources (e.g., user input, network data, API parameters, environment variables, or function arguments traceable to such sources) and where there is a potential lack of, or insufficient, sanitization or validation against path traversal techniques (e.g., sequences like '..', absolute paths, symbolic links, null bytes, or encoding tricks).",
    "subdirs_or_files": [
      "/"
    ]
  },
  {
    "name": "Arbitrary File Write",
    "filter_prompt": "This code snippet involves a file system write operation (such as creating, writing to, or moving a file). The destination path, filename, or the content of the file appears to be constructed or influenced by data originating from an external source (e.g., user input, API request parameters, network data, configuration files, environment variables) and there is no clear evidence of robust sanitization, validation, or restriction of the path to a predefined safe directory.",
    "subdirs_or_files": [
      "/"
    ]
  },
  {
    "name": "Bypass of File Extension Restrictions",
    "filter_prompt": "This code snippet is involved in processing files uploaded by users. This includes operations such as retrieving the original filename or file extension, determining the destination path or filename for storage, moving or saving the uploaded file to the server's filesystem, and/or implementing validation rules to restrict allowed file types. These validation rules might be based on the file's extension (e.g., checking against a list of permitted or forbidden extensions like '.php', '.jsp', '.asp', '.exe', '.gif', '.jpg'), its MIME type, or its initial bytes (magic bytes/file signatures).",
    "subdirs_or_files": [
      "/"
    ]
  }
]